@page "/"
@using NVPN.Cross.Dal.Models

@inject NVPN.Cross.BL.Services.Interfaces.IVpnConnectService VpnService
@inject NVPN.Cross.BL.Services.Interfaces.IVlessConfigService VlessConfigService

<div class="vpn-container">
    <div class="vpn-panel">
        <div class="header">@_timerDisplay</div>
        
        <div class="input-section">
            <div class="input-container">
                <input @bind="_vlessUrl" placeholder="Вставьте VLESS ссылку..." class="vless-input" />
                <button class="save-btn @(_isBusy ? "loading" : "")" @onclick="SaveConfig" disabled="@_isBusy" title="Сохранить конфигурацию">
                    <span class="save-icon">💾</span>
                </button>
            </div>
            @if (!string.IsNullOrEmpty(_errorMsg))
            {
                <div class="error-message">@_errorMsg</div>
            }
        </div>
        
        <div class="connection-section">
            <button class="circle-btn @(_isConnected ? "connected" : "disconnected") @(_isBusy ? "loading" : "")" 
                    @onclick="ToggleConnection" disabled="@_isBusy">
                @if (_isConnected)
                {
                    <span style="display: flex; align-items: center; justify-content: center;">⏹</span>
                }
                else
                {
                    <span style="display: flex; align-items: center; justify-content: center; margin-left: 3px;">▶</span>
                }
            </button>
            <div class="status">@(_isConnected ? "Подключено" : "Не подключено")</div>
        </div>

        <div class="menu-section">
            <div class="menu-block" @onclick='()=>ShowPopup("routes")' style="position: relative;">
                <span><span class="icon">🔀</span>Маршрутизация</span>
                <span class="arrow">›</span>
                @if (_showPopup == "routes")
                {
                    <div class="popup-backdrop" @onclick="HidePopup">
                        <div class="popup" @onclick:stopPropagation="true">
                            <span class="close" @onclick="HidePopup" @onclick:stopPropagation="true">✕</span>
                            <b>Маршрутизация</b><br />
                            Настройка правил маршрутизации трафика через VPN.<br />
                            <small>• Весь трафик<br />• Только определенные сайты<br />• Исключения для локальных ресурсов</small>
                        </div>
                    </div>
                }
            </div>
            <div class="menu-block" @onclick='()=>ShowPopup("services")' style="position: relative;">
                <span><span class="icon">⚙️</span>Сервисы</span>
                <span class="arrow">›</span>
                @if (_showPopup == "services")
                {
                    <div class="popup-backdrop" @onclick="HidePopup">
                        <div class="popup" @onclick:stopPropagation="true">
                            <span class="close" @onclick="HidePopup" @onclick:stopPropagation="true">✕</span>
                            <b>Сервисы</b><br />
                            Управление системными сервисами VPN.<br />
                            <small>• Автозапуск<br />• Защита от утечек DNS<br />• Kill Switch</small>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="configs">
            <div class="configs-title">Конфигурации</div>
            @if (_vlessProfiles.Any())
            {
                @foreach (var profile in _vlessProfiles)
                {
                    <div class="config-item @(_selectedProfile == profile ? "selected" : "")" @onclick="() => SelectProfile(profile)">
                        <span>@profile.Remarks (@profile.Address:@profile.Port)</span>
                        @if (_selectedProfile == profile)
                        {
                            <span class="selected-indicator">✓</span>
                        }
                        @if (_selectedProfile != profile)
                        {
                            <button class="delete-btn" @onclick="() => DeleteProfile(profile)" title="Удалить конфигурацию"></button>
                        }
                    </div>
                }
            }
            else
            {
                <div class="no-configs"></div>
            }
        </div>

        <div class="footer">
            <button class="footer-btn active">
                <span>🔗</span>
                <span class="label">Подключение</span>
            </button>
            <button class="footer-btn">
                <span>⚙️</span>
                <span class="label">Настройки</span>
            </button>
        </div>
    </div>
</div>

@code {
    private bool _isConnected;
    private bool _isBusy;
    private string _timerDisplay = "00:00:00";
    private System.Timers.Timer? _timer;
    private int _seconds;
    private string? _showPopup;
    private string _vlessUrl = string.Empty;
    private string _errorMsg = string.Empty;
    private List<VlessProfile> _vlessProfiles = [];
    private VlessProfile? _selectedProfile;

    protected override async void OnInitialized()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (s, _) =>
        {
            if (!_isConnected) return;
                
            _seconds++;
            _timerDisplay = TimeSpan.FromSeconds(_seconds).ToString(@"hh\:mm\:ss");
            InvokeAsync(StateHasChanged);
        };
        _timer.Start();

        _vlessProfiles = await VlessConfigService.GetConfigsAsync();
    }

    private async Task SaveConfig()
    {
        _errorMsg = string.Empty;
        _isBusy = true;
        try
        {
            if (string.IsNullOrWhiteSpace(_vlessUrl) || !_vlessUrl.Trim().StartsWith("vless://"))
            {
                _errorMsg = "Введите корректную VLESS ссылку";
                return;
            }
            await VlessConfigService.SaveConfigAsync(_vlessUrl.Trim());
            _vlessProfiles = await VlessConfigService.GetConfigsAsync();
            _vlessUrl = string.Empty;
            _selectedProfile = null;
        }
        catch (Exception ex)
        {
            _errorMsg = ex.Message;
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    private void SelectProfile(VlessProfile profile)
    {
        _selectedProfile = profile;
        _errorMsg = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteProfile(VlessProfile profile)
    {
        await VlessConfigService.DeleteConfigAsync(profile);
        _vlessProfiles = await VlessConfigService.GetConfigsAsync();
        StateHasChanged();
    }

    private async Task ToggleConnection()
    {
        await Task.Yield();
        _errorMsg = string.Empty;
        _isBusy = true;
        try
        {
            VlessProfile profile;
            if (_selectedProfile != null)
            {
                profile = _selectedProfile;
            }
            else
            {
                if (string.IsNullOrWhiteSpace(_vlessUrl) || !_vlessUrl.Trim().StartsWith("vless://"))
                {
                    _errorMsg = "Введите корректную VLESS ссылку";
                    return;
                }
                profile = VlessProfile.ParseVlessUrl(_vlessUrl.Trim());
            }

            if (!_isConnected)
            {
                var ok = VpnService.Connect(profile, out var err);
                if (ok)
                {
                    _isConnected = true;
                    _seconds = 0;
                    _timerDisplay = "00:00:00";
                }
                else
                {
                    _errorMsg = err;
                }
            }
            else
            {
                var ok = VpnService.Disconnect(profile, out var err);
                if (ok)
                {
                    _isConnected = false;
                    _timerDisplay = "00:00:00";
                }
                else
                {
                    _errorMsg = err;
                }
            }
        }
        catch (Exception ex)
        {
            _errorMsg = ex.Message;
        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }
    }

    private void ShowPopup(string popup)
    {
        _showPopup = popup.Trim();
        StateHasChanged();
    }
    
    private void HidePopup()
    {
        _showPopup = null;
        StateHasChanged();
    }
}